{"version":3,"sources":["api/card.ts","types/types.ts","utils/index.ts","utils/tags.tsx","components/wordcard/link.svg","components/wordcard/WordCard.tsx","api/export.ts","api/index.tsx","components/wordtile/WordTile.tsx","api/forms.ts","api/collins.ts","components/definition/add.svg","components/definition/Definition.tsx","components/dictionary/arrow-up.svg","components/dictionary/arrow-down.svg","components/dictionary/close.svg","components/dictionary/loading.gif","components/dictionary/Dictionary.tsx","components/reader/Reader.tsx","components/readerpopup/ReaderPopup.tsx","components/cardlist/CardList.tsx","views/cardlist/CardListView.tsx","components/articlecard/ArticleCard.tsx","components/articlelist/ArticleList.tsx","components/homebanner/HomeBanner.tsx","views/main/MainView.tsx","views/reader/ReaderView.tsx","utils/hooks.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CARD_LIST_KEY","cardList","JSON","parse","localStorage","getItem","c","undefined","exported","saveCardList","setItem","stringify","TOKEN_TYPE","card","cList","push","makeClasses","classObject","Object","entries","filter","map","k","join","bracketToBoldTag","str","replace","maskWord","word","maskBold","substring","WordCard","defaultState","id","originalWord","sentence","articleId","wordTileIndex","dictResult","addTime","onShowContextPopup","useState","cardState","setCardState","toggleHide","cardClass","Boolean","className","onClick","src","link","e","stopPropagation","headword","dangerouslySetInnerHTML","__html","definition","Filesystem","Plugins","Share","exportApkg","fileName","a","deckName","apkg","AnkiExport","entry","addCard","phonetics","Promise","resolve","reject","save","then","zip","Capacitor","getPlatform","reader","FileReader","onloadend","base64data","result","writeFile","path","data","directory","FilesystemDirectory","Documents","readAsDataURL","saveAs","err","api","fetch","r","json","article","WordTile","text","selected","highlighted","tileRefFunc","ref","formsData","hwdsMap","forms","init","getBaseForms","formsArr","toLowerCase","CDN_PREFIX","stripSpanTag","html","trim","getCDNUrl","length","dir","slice","getHWDListToBeSearched","has","collins","search","w","all","nestedResult","resultForOneEntry","item","phrase","hwd","shortDefinition","def_cn","def_en","Set","Definition","onAdd","add","Dictionary","wordIndex","onClose","console","log","definitionList","setDefinitionList","displayMode","setDisplayMode","isLoading","setIsLoading","message","setMessage","useEffect","loadDefiniton","iconRow","arrowDown","arrowUp","close","loading","d","i","def","Date","now","toString","toast","success","Reader","title","content","highlights","selectable","scrollToHighlights","selectedWordIndex","setSelectedWordIndex","onWordClick","tokens","type","WORD","isSentenceEnd","token","EOL","endsWith","firstHighlight","tileRefArray","current","scrollIntoView","tokenIndex","useRef","makeWordTiles","WORD_REG","SYMBOL_REG","BLANK_REG","match","BLANK","SYMBOL","splitWords","concat","currentIndex","includes","el","index","left","right","getSentenceFromIndex","ReaderPopup","setArticle","getArticle","CardList","browser","detect","os","name","exportedCards","filterCardListByType","cardFilter","newCardList","setCardList","showContextPopup","setPopupArticleId","setPopupWordIndex","setCardFilter","cardOptions","popupArticleId","popupWordIndex","value","onChange","event","target","key","CardListView","NewsCard","imgUrl","summary","clickHandler","ArticleList","sourceUrl","newsList","setNewsList","history","useHistory","img","description","HomeBanner","MainView","ReaderView","params","useParams","URLSearchParams","useLocation","get","split","s","Number","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32e0866a.chunk.js","sourcesContent":["import { Card } from \"../types/types\";\n\nconst CARD_LIST_KEY = \"card_list_key\";\n\nlet cardList: Card[] = JSON.parse(localStorage.getItem(CARD_LIST_KEY) || \"[]\");\n\n// 初始化exported属性，最早的版本没这个\nfor (const c of cardList) {\n  if (c.exported === undefined) {\n    c.exported = false;\n  }\n}\n\nfunction saveCardList() {\n  localStorage.setItem(CARD_LIST_KEY, JSON.stringify(cardList, null, 2));\n}\n\nexport const card = {\n  getCardList() {\n    return cardList;\n  },\n  setCardList(cList: Card[]) {\n    cardList = cList;\n    saveCardList();\n  },\n  addCard(card: Card) {\n    cardList.push(card);\n    saveCardList();\n  },\n  deleteCard(id: string) {\n    const index = cardList.findIndex((card) => card.id === id);\n    if (~index) {\n      cardList.splice(index, 1);\n      saveCardList();\n    } else {\n      throw new Error(`card with id ${id} not exist.`);\n    }\n  },\n  findCard(id: string) {\n    return cardList.find((card) => card.id === id);\n  },\n  modifyCard(id: string, card: Card) {\n    const index = cardList.findIndex((card) => card.id === id);\n    if (~index) {\n      cardList[index] = card;\n      saveCardList();\n    } else {\n      throw new Error(`card with id ${id} not exist.`);\n    }\n  },\n};\n","interface ArticleBlock {\n  type: \"text\" | \"subtitle\" | \"citation\" | \"image\";\n  /**\n   * use markdown notation\n   * *italic* **bold**\n   */\n  content: string;\n}\n\nexport interface Article {\n  articleId: string;\n  title: string;\n  /**\n   * epoch time in mills\n   */\n  publishDate: number;\n  content: ArticleBlock[];\n}\n\nexport interface ArticleItem {\n  title: string;\n  date: string;\n  img: string;\n  description: string;\n  id: string;\n}\n\nexport enum TOKEN_TYPE {\n  WORD,\n  BLANK,\n  SYMBOL,\n  EOL,\n}\n\nexport interface Token {\n  word: string;\n  type: TOKEN_TYPE;\n}\n\nexport interface DictResultEntry {\n  headword: string;\n  phonetics?: string;\n  shortDefinition: string;\n  definition: string;\n}\n\nexport interface Card {\n  id: string;\n  originalWord: string;\n  sentence: string;\n  articleId: string;\n  wordTileIndex: number;\n  dictResult: DictResultEntry;\n  // unix time\n  addTime: number;\n  exported?: boolean;\n}\n","import { Token, TOKEN_TYPE } from \"../types/types\";\n\nexport function makeClasses(classObject: { [key: string]: boolean }): string {\n  return Object.entries(classObject)\n    .filter(([k, v]) => v)\n    .map(([k, v]) => k)\n    .join(\" \");\n}\n\nexport function splitWords(text: string): Token[] {\n  const WORD_REG = /^[A-Za-z-]+/;\n  const SYMBOL_REG = /^([^A-Za-z- ])+/;\n  const BLANK_REG = /^\\s+/;\n  const result = [] as Token[];\n  let count = 0;\n  while (text) {\n    let c;\n    if ((c = text.match(WORD_REG))) {\n      result.push({\n        word: c[0],\n        type: TOKEN_TYPE.WORD,\n      });\n      count++;\n    } else if ((c = text.match(BLANK_REG))) {\n      result.push({\n        word: c[0],\n        type: TOKEN_TYPE.BLANK,\n      });\n      count++;\n    } else if ((c = text.match(SYMBOL_REG))) {\n      result.push({\n        word: c[0],\n        type: TOKEN_TYPE.SYMBOL,\n      });\n      count++;\n    }\n    if (c) {\n      text = text.slice(c[0].length);\n    }\n  }\n  return result;\n}\n","export function bracketToBoldTag(str: string) {\n  return str.replace(/\\[\\[(.+?)\\]\\]/g, \"<b>$1</b>\");\n}\nexport function maskWord(word: string) {\n  return word.replace(/\\S/g, \"*\");\n}\nexport function maskBold(str: string) {\n  return str.replace(\n    /<b>(.+?)<\\/b>/g,\n    (substring: string, ...args: any[]): string => {\n      return maskWord(args[0]);\n    }\n  );\n}\n","export default __webpack_public_path__ + \"static/media/link.00ac3d86.svg\";","import { useState } from \"react\";\nimport { Card } from \"../../types/types\";\nimport { makeClasses } from \"../../utils\";\nimport { bracketToBoldTag, maskWord, maskBold } from \"../../utils/tags\";\nimport \"./WordCard.css\";\nimport link from \"./link.svg\";\n\ntype State = \"show\" | \"hide\";\n\ntype Props = Card & {\n  defaultState: State;\n  onShowContextPopup: (articleId: string, wordTileIndex: number) => void;\n};\n\nexport default function WordCard({\n  defaultState,\n  id,\n  originalWord,\n  sentence,\n  articleId,\n  wordTileIndex,\n  dictResult,\n  addTime,\n  exported,\n  onShowContextPopup,\n}: Props) {\n  const [cardState, setCardState] = useState(\"hide\");\n  function toggleHide() {\n    setCardState(cardState === \"hide\" ? \"show\" : \"hide\");\n  }\n  const cardClass = makeClasses({\n    \"word-card\": true,\n    exported: Boolean(exported),\n  });\n  if (cardState === \"show\") {\n    return (\n      <div className={cardClass} onClick={toggleHide}>\n        <h3>\n          <img\n            src={link}\n            onClick={(e: React.MouseEvent) => {\n              e.stopPropagation();\n              onShowContextPopup(articleId, wordTileIndex);\n            }}\n          />{\" \"}\n          {dictResult.headword}\n        </h3>\n        <p dangerouslySetInnerHTML={{ __html: dictResult.definition }}></p>\n        <p dangerouslySetInnerHTML={{ __html: bracketToBoldTag(sentence) }}></p>\n      </div>\n    );\n  } else {\n    return (\n      <div className={cardClass} onClick={toggleHide}>\n        <h3>{maskWord(dictResult.headword)}</h3>\n        <p\n          dangerouslySetInnerHTML={{ __html: maskBold(dictResult.definition) }}\n        ></p>\n        <p\n          dangerouslySetInnerHTML={{\n            __html: maskBold(bracketToBoldTag(sentence)),\n          }}\n        ></p>\n      </div>\n    );\n  }\n}\n","// @ts-ignore\nimport AnkiExport from \"anki-apkg-export\";\nimport { Plugins, FilesystemDirectory, Capacitor } from \"@capacitor/core\";\nimport { saveAs } from \"file-saver\";\nimport toast from \"react-hot-toast\";\nimport { Card } from \"../types/types\";\nimport { bracketToBoldTag } from \"../utils/tags\";\n\nconst { Filesystem, Share } = Plugins;\n\nexport async function exportApkg(\n  cardList: Card[],\n  fileName: string,\n  deckName = \"duck-reader\"\n) {\n  const apkg = new AnkiExport(deckName);\n\n  for (const entry of cardList) {\n    apkg.addCard(\n      `<h3>${entry.dictResult.headword}</h3>\n         <p>${bracketToBoldTag(entry.sentence)}</p>\n        `,\n      `\n         <p>${entry.dictResult.phonetics}</p>\n         <p>${entry.dictResult.definition}</p>\n        `\n    );\n  }\n\n  return new Promise((resolve, reject) => {\n    apkg.save().then((zip: any) => {\n      if (Capacitor.getPlatform() === \"android\") {\n        var reader = new FileReader();\n        reader.onloadend = async () => {\n          var base64data = reader.result;\n          try {\n            const result = await Filesystem.writeFile({\n              path: fileName,\n              data: base64data as string,\n              directory: FilesystemDirectory.Documents,\n            });\n            resolve(result);\n          } catch (err) {\n            reject(err);\n          }\n        };\n        reader.readAsDataURL(zip);\n      } else {\n        try {\n          saveAs(zip, fileName);\n          resolve(true);\n        } catch (err) {\n          reject(err);\n        }\n      }\n    });\n  });\n}\n","import { Article } from \"../types/types\";\n\nexport const api = {\n  async getArticleDetail(id: string): Promise<Article> {\n    const article = (await fetch(`/data/article/${id}.json`).then((r) =>\n      r.json()\n    )) as Article;\n    return article;\n  },\n};\n","import { makeClasses } from \"../../utils\";\nimport \"./WordTile.css\";\n\ntype Props = {\n  id: number;\n  text: string;\n  selected: boolean;\n  highlighted: boolean;\n  tileRefFunc?: (el: HTMLSpanElement) => void;\n  onClick: (id: number) => void;\n};\n\nexport default function WordTile({\n  id,\n  text,\n  selected,\n  highlighted,\n  onClick,\n  tileRefFunc,\n}: Props) {\n  function onTileClick(e: React.MouseEvent) {\n    e.stopPropagation();\n    onClick(id);\n  }\n  return (\n    <span\n      onClick={onTileClick}\n      className={makeClasses({\n        \"word-tile\": true,\n        selected,\n        highlighted,\n      })}\n      ref={tileRefFunc}\n    >\n      {text}\n    </span>\n  );\n}\n","let formsData: { [key: string]: string[] };\n\nexport const forms = {\n  async init() {\n    if (!formsData) {\n      formsData = await fetch(\n        \"https://cdn.jsdelivr.net/gh/mmjang/dict_hub@main/hub/forms.map.json\"\n      ).then((r) => r.json());\n    }\n  },\n  async getBaseForms(word: string): Promise<string[]> {\n    await forms.init();\n    const formsArr = formsData[word.toLowerCase()];\n    return formsArr || [];\n  },\n};\n","import { DictResultEntry } from \"../types/types\";\nimport { forms } from \"./forms\";\n\ninterface CollinsEntry {\n  def_cn: string;\n  def_en: string;\n  display_hwd: string;\n  ext: string;\n  hwd: string;\n  phonetics: string;\n  phrase: string;\n  sense: string;\n}\n\nlet hwdsMap: any;\n\nconst CDN_PREFIX = \"https://cdn.jsdelivr.net/gh/mmjang/dict_hub@main\";\n\nfunction stripSpanTag(html: string) {\n  return html\n    .replace(/\\r|\\t|\\n/g, \"\")\n    .replace(/^<span.+?>(.*?)<\\/span>$/, \"$1\")\n    .trim();\n}\n\nfunction getDefinitionFromEntry(entry: CollinsEntry) {\n  return stripSpanTag(entry.def_cn) + \" \" + stripSpanTag(entry.def_en);\n}\n\nfunction getCDNUrl(word: string): string {\n  if (word.length <= 2) {\n    return `${CDN_PREFIX}/hub/collins/${word}.json`;\n  } else {\n    const dir = word.slice(0, 2);\n    return `${CDN_PREFIX}/hub/collins/_${dir}/${word}.json`;\n  }\n}\n\nasync function getHWDListToBeSearched(word: string): Promise<string[]> {\n  const formsArr = await forms.getBaseForms(word.toLowerCase());\n  const result = [word.toLowerCase(), ...formsArr].filter((r) =>\n    hwdsMap.has(r)\n  );\n  return result;\n}\n\nexport const collins = {\n  async search(word: string): Promise<DictResultEntry[]> {\n    await this.init();\n    if (!hwdsMap) {\n      throw \"柯林斯还未初始化\";\n    }\n    const result = [];\n    const nestedResult = (await Promise.all(\n      (await getHWDListToBeSearched(word)).map((w) => {\n        return fetch(getCDNUrl(w)).then((r) => r.json());\n      })\n    )) as CollinsEntry[][];\n    for (const resultForOneEntry of nestedResult) {\n      for (const definition of resultForOneEntry) {\n        result.push(definition);\n      }\n    }\n    return result.map((item) => ({\n      headword: item.phrase ? item.phrase : item.hwd,\n      phonetics: item.phonetics,\n      shortDefinition: stripSpanTag(item.def_cn),\n      definition: getDefinitionFromEntry(item),\n    }));\n  },\n  async init() {\n    await forms.init();\n    if (!hwdsMap) {\n      hwdsMap = new Set(\n        await fetch(CDN_PREFIX + \"/hub/collins.list.json\").then((r) => r.json())\n      );\n    }\n    return true;\n  },\n};\n","export default __webpack_public_path__ + \"static/media/add.9074dc48.svg\";","import { DictResultEntry } from \"../../types/types\";\nimport \"./Definition.css\";\nimport add from \"./add.svg\";\n\nexport default function Definition({\n  headword,\n  phonetics,\n  definition,\n  onAdd,\n}: DictResultEntry & { onAdd: () => void }) {\n  return (\n    <div className=\"definition\">\n      <div className=\"hwd-row\">\n        <img src={add} onClick={onAdd} />\n        <b>{headword}</b>\n      </div>\n      <p dangerouslySetInnerHTML={{ __html: definition }}></p>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/arrow-up.1ba202ef.svg\";","export default __webpack_public_path__ + \"static/media/arrow-down.200220c5.svg\";","export default __webpack_public_path__ + \"static/media/close.53c9f4b6.svg\";","export default __webpack_public_path__ + \"static/media/loading.2ce5c7c5.gif\";","import { useEffect, useState } from \"react\";\nimport { collins } from \"../../api/collins\";\nimport { DictResultEntry } from \"../../types/types\";\nimport Definition from \"../definition/Definition\";\nimport \"./Dictionary.css\";\nimport arrowUp from \"./arrow-up.svg\";\nimport arrowDown from \"./arrow-down.svg\";\nimport close from \"./close.svg\";\nimport loading from \"./loading.gif\";\nimport { card } from \"../../api/card\";\nimport WordTile from \"../wordtile/WordTile\";\nimport toast from \"react-hot-toast\";\n\ninterface Props {\n  word: string;\n  sentence?: string;\n  articleId: string;\n  wordIndex: number;\n  onClose: () => void;\n}\n\ntype DisplayMode = \"compact\" | \"full\";\n\nexport default function Dictionary({\n  word,\n  sentence = \"\",\n  articleId,\n  wordIndex,\n  onClose,\n}: Props) {\n  console.log(\"rerender\");\n  const [definitionList, setDefinitionList] = useState<DictResultEntry[]>([]);\n  const [displayMode, setDisplayMode] = useState<DisplayMode>(\"compact\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    async function loadDefiniton() {\n      try {\n        setIsLoading(true);\n        setMessage(\"\");\n        const result = await collins.search(word);\n        setDefinitionList(result);\n        if (result.length === 0) {\n          setMessage(\"没查到这个词.\");\n        }\n      } catch {\n        setMessage(\"网络错误.\");\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    loadDefiniton();\n  }, [word]);\n\n  function addDefinition(def: DictResultEntry): void {\n    card.addCard({\n      id: Date.now().toString(),\n      originalWord: word,\n      sentence,\n      articleId,\n      wordTileIndex: wordIndex,\n      dictResult: def,\n      addTime: Date.now(),\n    });\n    toast.success(\"添加成功\");\n  }\n\n  const iconRow = (\n    <div\n      className=\"icon-row\"\n      onClick={() =>\n        setDisplayMode(displayMode === \"full\" ? \"compact\" : \"full\")\n      }\n    >\n      <img\n        src={displayMode === \"full\" ? arrowDown : arrowUp}\n        className=\"expand-icon\"\n      />\n      <img src={close} className=\"close-icon\" onClick={onClose} />\n    </div>\n  );\n  if (isLoading) {\n    return (\n      <div className=\"dictionary\">\n        {iconRow}\n        <div className=\"loading\">\n          <img src={loading} />\n        </div>\n      </div>\n    );\n  }\n  if (displayMode === \"full\") {\n    return (\n      <div className=\"dictionary\">\n        {iconRow}\n        <div className=\"message\">{message}</div>\n        {definitionList.map((d, i) => (\n          <div key={i} className=\"definition-wrapper\">\n            <Definition {...d} onAdd={() => addDefinition(d)}></Definition>\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"dictionary compact\">\n        {iconRow}\n        <div className=\"message\">{message}</div>\n        {definitionList.map((d, i) => (\n          <span key={i} className=\"tag\">\n            {d.shortDefinition}\n          </span>\n        ))}\n      </div>\n    );\n  }\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport { Article, TOKEN_TYPE } from \"../../types/types\";\nimport { splitWords } from \"../../utils\";\nimport WordTile from \"../wordtile/WordTile\";\nimport { Token } from \"../../types/types\";\nimport { collins } from \"../../api/collins\";\nimport Dictionary from \"../dictionary/Dictionary\";\nimport \"./Reader.css\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function Reader({\n  title = \"\",\n  content = [],\n  articleId,\n  // tile index list of highlighted words\n  highlights = [],\n  // is word selectable\n  selectable = true,\n  scrollToHighlights = false,\n}: Partial<Article> & {\n  articleId: string;\n  highlights?: number[];\n  selectable?: boolean;\n  scrollToHighlights?: boolean;\n}) {\n  const [selectedWordIndex, setSelectedWordIndex] = useState(-1);\n\n  async function onWordClick(id: number) {\n    console.log(\"word select: \", id);\n    const token = tokens[id];\n    if (token.type === TOKEN_TYPE.WORD && selectable) {\n      setSelectedWordIndex(id);\n    }\n  }\n\n  function isSentenceEnd(token: Token) {\n    const str = token.word;\n    return (\n      token.type === TOKEN_TYPE.EOL ||\n      str.endsWith(\"?\") ||\n      str.endsWith(\".\") ||\n      str.endsWith(\"!\") ||\n      str.endsWith(\"...\") ||\n      str.endsWith('?\"') ||\n      str.endsWith('!\"') ||\n      str.endsWith('.\"')\n    );\n  }\n\n  function getSentenceFromIndex(index: number) {\n    const thrashhold = 50;\n    let left = index - 1;\n    let right = index;\n    let sentence = `[[${tokens[index].word}]]`;\n    while (left >= 0 && index - left < thrashhold) {\n      if (isSentenceEnd(tokens[left])) {\n        break;\n      }\n      sentence = tokens[left].word + sentence;\n      left--;\n    }\n    while (right < tokens.length && right - index < thrashhold) {\n      if (isSentenceEnd(tokens[right])) {\n        break;\n      }\n      right++;\n      sentence = sentence + tokens[right].word;\n    }\n    return sentence;\n  }\n\n  function onClickReader() {\n    setSelectedWordIndex(-1);\n  }\n\n  useEffect(() => {\n    if (highlights.length > 0) {\n      const firstHighlight = highlights[0];\n      if (firstHighlight < tileRefArray.current.length) {\n        tileRefArray.current[firstHighlight].scrollIntoView();\n      }\n    }\n  }, [highlights]);\n\n  let tokenIndex = 0;\n  const tokens = [] as Token[];\n  const tileRefArray = useRef<Element[]>([]);\n  function makeWordTiles(str: string) {\n    return splitWords(str)\n      .concat({ type: TOKEN_TYPE.EOL, word: \"\" })\n      .map((word, i) => {\n        const currentIndex = tokenIndex++;\n        tokens.push(word);\n        return (\n          <WordTile\n            id={currentIndex}\n            text={word.word}\n            selected={selectedWordIndex === currentIndex}\n            onClick={onWordClick}\n            highlighted={highlights.includes(currentIndex)}\n            key={currentIndex}\n            tileRefFunc={(el: HTMLSpanElement) => {\n              tileRefArray.current[currentIndex] = el;\n            }}\n          ></WordTile>\n        );\n      });\n  }\n  return (\n    <>\n      <div className=\"reader\" onClick={onClickReader}>\n        <h3>{makeWordTiles(title)}</h3>\n        {content?.map((item, index) => (\n          <p key={index}>{makeWordTiles(item.content)}</p>\n        ))}\n      </div>\n      {selectedWordIndex >= 0 ? (\n        <Dictionary\n          word={tokens[selectedWordIndex].word}\n          sentence={getSentenceFromIndex(selectedWordIndex)}\n          articleId={articleId}\n          wordIndex={selectedWordIndex}\n          onClose={() => setSelectedWordIndex(-1)}\n        ></Dictionary>\n      ) : null}\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { api } from \"../../api/index\";\nimport Reader from \"../../components/reader/Reader\";\nimport { Article } from \"../../types/types\";\nimport \"./ReaderPopup.css\";\n\ntype Props = {\n  articleId: string;\n  highlights?: number[];\n  onClose?: () => void;\n};\n\nexport default function ReaderPopup({\n  articleId,\n  highlights = [],\n  onClose = undefined,\n}: Props) {\n  const [article, setArticle] = useState<Article>();\n  useEffect(() => {\n    async function getArticle() {\n      setArticle(await api.getArticleDetail(articleId));\n    }\n    getArticle();\n  }, [articleId]);\n  return (\n    <div className=\"reader-popup-wrapper\">\n      <div className=\"blank-area\" onClick={onClose}></div>\n      <div className=\"reader-popup\">\n        {article ? (\n          <Reader\n            {...article}\n            highlights={highlights}\n            selectable={false}\n          ></Reader>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n","import { card } from \"../../api/card\";\nimport WordCard from \"../wordcard/WordCard\";\n// @ts-ignore\nimport AnkiExport from \"anki-apkg-export\";\nimport \"./CardList.css\";\nimport { bracketToBoldTag } from \"../../utils/tags\";\nimport {\n  Plugins,\n  FilesystemDirectory,\n  FilesystemEncoding,\n  Capacitor,\n} from \"@capacitor/core\";\nimport toast from \"react-hot-toast\";\nimport { useState } from \"react\";\nimport { useLocalStorage } from \"../../utils/hooks\";\nimport { Card } from \"../../types/types\";\nimport { exportApkg } from \"../../api/export\";\nimport ReaderPopup from \"../readerpopup/ReaderPopup\";\nimport { detect } from \"detect-browser\";\n\nconst { Filesystem, Share } = Plugins;\ntype CardFilterOption = \"all\" | \"exported\" | \"unexported\";\n\nexport default function CardList() {\n  const browser = detect();\n  async function exportCard() {\n    try {\n      if (\n        browser?.os?.includes(\"Android\") ||\n        (browser?.os?.includes(\"iOS\") && browser.name !== \"safari\")\n      ) {\n        toast(\"目前导出牌组功能仅支持电脑和iOS Safari。安卓App即将推出。\");\n        return;\n      }\n      const exportedCards = filterCardListByType(cardList, cardFilter);\n      await exportApkg(exportedCards, \"duck-reader.apkg\", \"duck-reader\");\n      const newCardList = cardList.map((c) => {\n        if (exportedCards.includes(c)) {\n          c.exported = true;\n        }\n        return c;\n      });\n      card.setCardList(newCardList);\n      setCardList(newCardList);\n      if (Capacitor.getPlatform() === \"web\") {\n        toast(\"牌组已下载\");\n      } else if (Capacitor.getPlatform() === \"android\") {\n        toast(\"牌组已导出至sdcard/Documents下\");\n      }\n    } catch {\n      toast(\"导出失败\");\n    }\n  }\n  function onCardFilterSelectorChange(\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) {\n    setCardFilter(event.target.value as CardFilterOption);\n  }\n  function filterCardListByType(cardList: Card[], type: CardFilterOption) {\n    if (type === \"all\") {\n      return cardList;\n    } else if (type === \"exported\") {\n      return cardList.filter((card) => card.exported);\n    } else {\n      return cardList.filter((card) => !card.exported);\n    }\n  }\n\n  function showContextPopup(id: string, index: number) {\n    setPopupArticleId(id);\n    setPopupWordIndex(index);\n  }\n\n  function hidePopup() {\n    setPopupArticleId(\"\");\n    setPopupWordIndex(-1);\n  }\n\n  const [cardFilter, setCardFilter] = useState<CardFilterOption>(\"all\");\n  const [cardList, setCardList] = useState<Card[]>(card.getCardList());\n  const cardOptions: CardFilterOption[] = [\"all\", \"exported\", \"unexported\"];\n  const [popupArticleId, setPopupArticleId] = useState(\"\");\n  const [popupWordIndex, setPopupWordIndex] = useState(-1);\n  return (\n    <>\n      <div className=\"card-list-banner\">\n        <select value={cardFilter} onChange={onCardFilterSelectorChange}>\n          <option value={cardOptions[0]}>全部</option>\n          <option value={cardOptions[1]}>已导出</option>\n          <option value={cardOptions[2]}>未导出</option>\n        </select>\n        <button onClick={exportCard}>导出Anki牌组</button>\n      </div>\n      <div className=\"card-list\">\n        {filterCardListByType(cardList, cardFilter).map((card, index) => (\n          <WordCard\n            {...card}\n            onShowContextPopup={showContextPopup}\n            defaultState=\"show\"\n            key={index}\n          ></WordCard>\n        ))}\n      </div>\n      {popupArticleId && popupWordIndex >= 0 ? (\n        <ReaderPopup\n          articleId={popupArticleId}\n          highlights={[popupWordIndex]}\n          onClose={hidePopup}\n        />\n      ) : null}\n    </>\n  );\n}\n","import CardList from \"../../components/cardlist/CardList\";\n\nexport default function CardListView() {\n  return <CardList></CardList>;\n}\n","import \"./ArticleCard.css\";\n\nexport default function NewsCard({\n  title,\n  imgUrl,\n  summary,\n  clickHandler,\n}: {\n  title: string;\n  imgUrl: string;\n  summary: string;\n  clickHandler: () => void;\n}) {\n  return (\n    <div className=\"article-item\" onClick={clickHandler}>\n      <div className=\"img-wrapper\">\n        <img src={imgUrl} className=\"img\" />\n      </div>\n      <div className=\"title\">{title}</div>\n      <div className=\"description\">{summary}</div>\n    </div>\n  );\n}\n","import \"./ArticleList.css\";\n\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ArticleCard from \"../../components/articlecard/ArticleCard\";\nimport { ArticleItem } from \"../../types/types\";\n\nexport default function ArticleList({ sourceUrl }: { sourceUrl: string }) {\n  const [newsList, setNewsList] = useState<ArticleItem[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const result: ArticleItem[] = await fetch(sourceUrl).then((r) =>\n        r.json()\n      );\n      setNewsList(result);\n    })();\n  }, [sourceUrl]);\n\n  const history = useHistory();\n\n  function handleClick(id: string) {\n    history.push(`/article/${id}`);\n  }\n\n  return (\n    <div>\n      {newsList.map((item) => (\n        <ArticleCard\n          title={item.title}\n          imgUrl={item.img}\n          summary={item.description}\n          key={item.id}\n          clickHandler={() => handleClick(item.id)}\n        ></ArticleCard>\n      ))}\n    </div>\n  );\n}\n","import { useHistory } from \"react-router-dom\";\nimport \"./HomeBanner.css\";\nimport FileSaver, { saveAs } from \"file-saver\";\n\nexport default function HomeBanner() {\n  const history = useHistory();\n  async function navigateToCardList() {\n    history.push(\"/cardlist\");\n  }\n  return (\n    <div className=\"home-banner\">\n      <span className=\"title\">划词网页版</span>\n      <div className=\"card-list-button\" onClick={navigateToCardList}>\n        卡片列表\n      </div>\n    </div>\n  );\n}\n","import ArticleList from \"../../components/articlelist/ArticleList\";\nimport HomeBanner from \"../../components/homebanner/HomeBanner\";\nimport \"./MainView.css\";\n\nexport default function MainView() {\n  return (\n    <div className=\"home-view\">\n      <HomeBanner></HomeBanner>\n      <ArticleList sourceUrl=\"/data/section/editor.json\"></ArticleList>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { api } from \"../../api/index\";\nimport Reader from \"../../components/reader/Reader\";\nimport { Article } from \"../../types/types\";\nimport { useQuery } from \"../../utils/hooks\";\n\nexport default function ReaderView() {\n  const params = useParams<{ id: string }>();\n  const query = useQuery();\n  const highlights = (query.get(\"highlights\") || \"\")\n    .split(\" \")\n    .filter((s) => s)\n    .map(Number);\n  console.log(\"hilights: \", highlights);\n  const id = params.id;\n  const [article, setArticle] = useState<Article>();\n  useEffect(() => {\n    async function getArticle() {\n      setArticle(await api.getArticleDetail(id));\n    }\n    getArticle();\n  }, [id]);\n  return (\n    <div className=\"App\">\n      {article ? <Reader {...article} highlights={highlights}></Reader> : \"\"}\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue: (v: T) => void = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","import React from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport CardListView from \"./views/cardlist/CardListView\";\nimport MainView from \"./views/main/MainView\";\nimport ReaderView from \"./views/reader/ReaderView\";\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <MainView></MainView>\n          </Route>\n          <Route path=\"/article/:id\">\n            <ReaderView></ReaderView>\n          </Route>\n          <Route path=\"/cardlist\">\n            <CardListView></CardListView>\n          </Route>\n        </Switch>\n      </Router>\n      <Toaster />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}