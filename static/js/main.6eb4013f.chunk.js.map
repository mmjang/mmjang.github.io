{"version":3,"sources":["api/card.ts","components/wordcard/WordCard.tsx","components/cardlist/CardList.tsx","views/cardlist/CardListView.tsx","components/articlecard/ArticleCard.tsx","components/articlelist/ArticleList.tsx","components/homebanner/HomeBanner.tsx","views/main/MainView.tsx","api/index.tsx","types/types.ts","components/wordtile/WordTile.tsx","utils/index.ts","api/forms.ts","api/collins.ts","components/definition/add.svg","components/definition/Definition.tsx","components/dictionary/arrow-up.svg","components/dictionary/arrow-down.svg","components/dictionary/close.svg","components/dictionary/loading.gif","components/dictionary/Dictionary.tsx","components/reader/Reader.tsx","views/reader/ReaderView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CARD_LIST_KEY","cardList","JSON","parse","localStorage","getItem","saveCardList","setItem","stringify","card","push","bracketToBoldTag","str","replace","maskWord","word","maskBold","substring","WordCard","defaultState","id","originalWord","sentence","dictResult","articleId","wordTileIndex","addTime","useState","cardState","setCardState","toggleHide","className","onClick","headword","dangerouslySetInnerHTML","__html","definition","CardList","map","index","key","CardListView","NewsCard","title","imgUrl","summary","clickHandler","src","ArticleList","sourceUrl","newsList","setNewsList","useEffect","a","fetch","then","r","json","result","history","useHistory","item","img","description","HomeBanner","MainView","TOKEN_TYPE","api","article","WordTile","classObject","text","selected","e","stopPropagation","Object","entries","filter","k","join","formsData","hwdsMap","forms","init","getBaseForms","formsArr","toLowerCase","CDN_PREFIX","stripSpanTag","html","trim","getCDNUrl","length","dir","slice","getHWDListToBeSearched","has","collins","search","Promise","w","all","nestedResult","resultForOneEntry","phrase","hwd","phonetics","shortDefinition","def_cn","entry","def_en","Set","Definition","onAdd","add","Dictionary","wordIndex","onClose","console","log","definitionList","setDefinitionList","displayMode","setDisplayMode","isLoading","setIsLoading","message","setMessage","loadDefiniton","iconRow","arrowDown","arrowUp","close","loading","d","i","def","Date","now","toString","toast","success","Reader","content","selectedWordIndex","setSelectedWordIndex","onWordClick","tokens","type","WORD","makeWordTiles","WORD_REG","SYMBOL_REG","BLANK_REG","c","match","BLANK","SYMBOL","splitWords","concat","EOL","currentIndex","tokenIndex","isSentenceEnd","token","endsWith","left","right","getSentenceFromIndex","ReaderView","useParams","setArticle","getArticle","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6eb4013f.chunk.js","sourcesContent":["import { Card } from \"../types/types\";\n\nconst CARD_LIST_KEY = \"card_list_key\";\n\nconst cardList: Card[] = JSON.parse(\n  localStorage.getItem(CARD_LIST_KEY) || \"[]\"\n);\n\nfunction saveCardList() {\n  localStorage.setItem(CARD_LIST_KEY, JSON.stringify(cardList, null, 2));\n}\n\nexport const card = {\n  getCardList() {\n    return cardList;\n  },\n  addCard(card: Card) {\n    cardList.push(card);\n    saveCardList();\n  },\n  deleteCard(id: string) {\n    const index = cardList.findIndex((card) => card.id === id);\n    if (~index) {\n      cardList.splice(index, 1);\n      saveCardList();\n    } else {\n      throw new Error(`card with id ${id} not exist.`);\n    }\n  },\n  findCard(id: string) {\n    return cardList.find((card) => card.id === id);\n  },\n  modifyCard(id: string, card: Card) {\n    const index = cardList.findIndex((card) => card.id === id);\n    if (~index) {\n      cardList[index] = card;\n      saveCardList();\n    } else {\n      throw new Error(`card with id ${id} not exist.`);\n    }\n  },\n};\n","import { useState } from \"react\";\nimport { Card } from \"../../types/types\";\nimport \"./WordCard.css\";\n\ntype State = \"show\" | \"hide\";\n\ntype Props = Card & {\n  defaultState: State;\n};\n\nfunction bracketToBoldTag(str: string) {\n  return str.replace(/\\[\\[(.+?)\\]\\]/g, \"<b>$1</b>\");\n}\n\nfunction maskWord(word: string) {\n  return word.replace(/\\S/g, \"*\");\n}\n\nfunction maskBold(str: string) {\n  return str.replace(\n    /<b>(.+?)<\\/b>/g,\n    (substring: string, ...args: any[]): string => {\n      return maskWord(args[0]);\n    }\n  );\n}\n\nexport default function WordCard({\n  defaultState,\n  id,\n  originalWord,\n  sentence,\n  articleId,\n  wordTileIndex,\n  dictResult,\n  addTime,\n}: Props) {\n  const [cardState, setCardState] = useState(\"hide\");\n  function toggleHide() {\n    setCardState(cardState === \"hide\" ? \"show\" : \"hide\");\n  }\n  if (cardState === \"show\") {\n    return (\n      <div className=\"word-card\" onClick={toggleHide}>\n        <h3>{dictResult.headword}</h3>\n        <p dangerouslySetInnerHTML={{ __html: dictResult.definition }}></p>\n        <p dangerouslySetInnerHTML={{ __html: bracketToBoldTag(sentence) }}></p>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"word-card\" onClick={toggleHide}>\n        <h3>{maskWord(dictResult.headword)}</h3>\n        <p\n          dangerouslySetInnerHTML={{ __html: maskBold(dictResult.definition) }}\n        ></p>\n        <p\n          dangerouslySetInnerHTML={{\n            __html: maskBold(bracketToBoldTag(sentence)),\n          }}\n        ></p>\n      </div>\n    );\n  }\n}\n","import { card } from \"../../api/card\";\nimport WordCard from \"../wordcard/WordCard\";\nimport \"./CardList.css\";\n\nexport default function CardList() {\n  return (\n    <div className=\"card-list\">\n      {card.getCardList().map((card, index) => (\n        <WordCard {...card} defaultState=\"show\" key={index}></WordCard>\n      ))}\n    </div>\n  );\n}\n","import CardList from \"../../components/cardlist/CardList\";\n\nexport default function CardListView() {\n  return <CardList></CardList>;\n}\n","import \"./ArticleCard.css\";\n\nexport default function NewsCard({\n  title,\n  imgUrl,\n  summary,\n  clickHandler,\n}: {\n  title: string;\n  imgUrl: string;\n  summary: string;\n  clickHandler: () => void;\n}) {\n  return (\n    <div className=\"article-item\" onClick={clickHandler}>\n      <div className=\"img-wrapper\">\n        <img src={imgUrl} className=\"img\" />\n      </div>\n      <div className=\"title\">{title}</div>\n      <div className=\"description\">{summary}</div>\n    </div>\n  );\n}\n","import \"./ArticleList.css\";\n\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ArticleCard from \"../../components/articlecard/ArticleCard\";\nimport { ArticleItem } from \"../../types/types\";\n\nexport default function ArticleList({ sourceUrl }: { sourceUrl: string }) {\n  const [newsList, setNewsList] = useState<ArticleItem[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const result: ArticleItem[] = await fetch(sourceUrl).then((r) =>\n        r.json()\n      );\n      setNewsList(result);\n    })();\n  }, [sourceUrl]);\n\n  const history = useHistory();\n\n  function handleClick(id: string) {\n    history.push(`/article/${id}`);\n  }\n\n  return (\n    <div>\n      {newsList.map((item) => (\n        <ArticleCard\n          title={item.title}\n          imgUrl={item.img}\n          summary={item.description}\n          key={item.id}\n          clickHandler={() => handleClick(item.id)}\n        ></ArticleCard>\n      ))}\n    </div>\n  );\n}\n","import { useHistory } from \"react-router-dom\";\nimport \"./HomeBanner.css\";\n\nexport default function HomeBanner() {\n  const history = useHistory();\n  function navigateToCardList() {\n    history.push(\"/cardlist\");\n  }\n  return (\n    <div className=\"home-banner\">\n      <span className=\"title\">划词网页版</span>\n      <div className=\"card-list-button\" onClick={navigateToCardList}>\n        卡片列表\n      </div>\n    </div>\n  );\n}\n","import ArticleList from \"../../components/articlelist/ArticleList\";\nimport HomeBanner from \"../../components/homebanner/HomeBanner\";\nimport \"./MainView.css\";\n\nexport default function MainView() {\n  return (\n    <div className=\"home-view\">\n      <HomeBanner></HomeBanner>\n      <ArticleList sourceUrl=\"/data/section/editor.json\"></ArticleList>\n    </div>\n  );\n}\n","import { Article } from \"../types/types\";\n\nexport const api = {\n  async getArticleDetail(id: string): Promise<Article> {\n    const article = (await fetch(`/data/article/${id}.json`).then((r) =>\n      r.json()\n    )) as Article;\n    return article;\n  },\n};\n","interface ArticleBlock {\n  type: \"text\" | \"subtitle\" | \"citation\" | \"image\";\n  /**\n   * use markdown notation\n   * *italic* **bold**\n   */\n  content: string;\n}\n\nexport interface Article {\n  articleId: string;\n  title: string;\n  /**\n   * epoch time in mills\n   */\n  publishDate: number;\n  content: ArticleBlock[];\n}\n\nexport interface ArticleItem {\n  title: string;\n  date: string;\n  img: string;\n  description: string;\n  id: string;\n}\n\nexport enum TOKEN_TYPE {\n  WORD,\n  BLANK,\n  SYMBOL,\n  EOL,\n}\n\nexport interface Token {\n  word: string;\n  type: TOKEN_TYPE;\n}\n\nexport interface DictResultEntry {\n  headword: string;\n  phonetics?: string;\n  shortDefinition: string;\n  definition: string;\n}\n\nexport interface Card {\n  id: string;\n  originalWord: string;\n  sentence: string;\n  articleId: string;\n  wordTileIndex: number;\n  dictResult: DictResultEntry;\n  // unix time\n  addTime: number;\n}\n","import { makeClasses } from \"../../utils\";\nimport \"./WordTile.css\";\n\ntype Props = {\n  id: number;\n  text: string;\n  selected: boolean;\n  onClick: (id: number) => void;\n};\n\nexport default function WordTile({ id, text, selected, onClick }: Props) {\n  function onTileClick(e: React.MouseEvent) {\n    e.stopPropagation();\n    onClick(id);\n  }\n  return (\n    <span\n      onClick={onTileClick}\n      className={makeClasses({\n        \"word-tile\": true,\n        selected,\n      })}\n    >\n      {text}\n    </span>\n  );\n}\n","import { Token, TOKEN_TYPE } from \"../types/types\";\n\nexport function makeClasses(classObject: { [key: string]: boolean }): string {\n  return Object.entries(classObject)\n    .filter(([k, v]) => v)\n    .map(([k, v]) => k)\n    .join(\" \");\n}\n\nexport function splitWords(text: string): Token[] {\n  const WORD_REG = /^[A-Za-z-]+/;\n  const SYMBOL_REG = /^([^A-Za-z- ])+/;\n  const BLANK_REG = /^\\s+/;\n  const result = [] as Token[];\n  let count = 0;\n  while (text) {\n    let c;\n    if ((c = text.match(WORD_REG))) {\n      result.push({\n        word: c[0],\n        type: TOKEN_TYPE.WORD,\n      });\n      count++;\n    } else if ((c = text.match(BLANK_REG))) {\n      result.push({\n        word: c[0],\n        type: TOKEN_TYPE.BLANK,\n      });\n      count++;\n    } else if ((c = text.match(SYMBOL_REG))) {\n      result.push({\n        word: c[0],\n        type: TOKEN_TYPE.SYMBOL,\n      });\n      count++;\n    }\n    if (c) {\n      text = text.slice(c[0].length);\n    }\n  }\n  return result;\n}\n","let formsData: { [key: string]: string[] };\n\nexport const forms = {\n  async init() {\n    if (!formsData) {\n      formsData = await fetch(\n        \"https://cdn.jsdelivr.net/gh/mmjang/dict_hub@main/hub/forms.map.json\"\n      ).then((r) => r.json());\n    }\n  },\n  async getBaseForms(word: string): Promise<string[]> {\n    await forms.init();\n    const formsArr = formsData[word.toLowerCase()];\n    return formsArr || [];\n  },\n};\n","import { DictResultEntry } from \"../types/types\";\nimport { forms } from \"./forms\";\n\ninterface CollinsEntry {\n  def_cn: string;\n  def_en: string;\n  display_hwd: string;\n  ext: string;\n  hwd: string;\n  phonetics: string;\n  phrase: string;\n  sense: string;\n}\n\nlet hwdsMap: any;\n\nconst CDN_PREFIX = \"https://cdn.jsdelivr.net/gh/mmjang/dict_hub@main\";\n\nfunction stripSpanTag(html: string) {\n  return html\n    .replace(/\\r|\\t|\\n/g, \"\")\n    .replace(/^<span.+?>(.*?)<\\/span>$/, \"$1\")\n    .trim();\n}\n\nfunction getDefinitionFromEntry(entry: CollinsEntry) {\n  return stripSpanTag(entry.def_cn) + \" \" + stripSpanTag(entry.def_en);\n}\n\nfunction getCDNUrl(word: string): string {\n  if (word.length <= 2) {\n    return `${CDN_PREFIX}/hub/collins/${word}.json`;\n  } else {\n    const dir = word.slice(0, 2);\n    return `${CDN_PREFIX}/hub/collins/_${dir}/${word}.json`;\n  }\n}\n\nasync function getHWDListToBeSearched(word: string): Promise<string[]> {\n  const formsArr = await forms.getBaseForms(word.toLowerCase());\n  const result = [word.toLowerCase(), ...formsArr].filter((r) =>\n    hwdsMap.has(r)\n  );\n  return result;\n}\n\nexport const collins = {\n  async search(word: string): Promise<DictResultEntry[]> {\n    await this.init();\n    if (!hwdsMap) {\n      throw \"柯林斯还未初始化\";\n    }\n    const result = [];\n    const nestedResult = (await Promise.all(\n      (await getHWDListToBeSearched(word)).map((w) => {\n        return fetch(getCDNUrl(w)).then((r) => r.json());\n      })\n    )) as CollinsEntry[][];\n    for (const resultForOneEntry of nestedResult) {\n      for (const definition of resultForOneEntry) {\n        result.push(definition);\n      }\n    }\n    return result.map((item) => ({\n      headword: item.phrase ? item.phrase : item.hwd,\n      phonetics: item.phonetics,\n      shortDefinition: stripSpanTag(item.def_cn),\n      definition: getDefinitionFromEntry(item),\n    }));\n  },\n  async init() {\n    await forms.init();\n    if (!hwdsMap) {\n      hwdsMap = new Set(\n        await fetch(CDN_PREFIX + \"/hub/collins.list.json\").then((r) => r.json())\n      );\n    }\n    return true;\n  },\n};\n","export default __webpack_public_path__ + \"static/media/add.9074dc48.svg\";","import { DictResultEntry } from \"../../types/types\";\nimport \"./Definition.css\";\nimport add from \"./add.svg\";\n\nexport default function Definition({\n  headword,\n  phonetics,\n  definition,\n  onAdd,\n}: DictResultEntry & { onAdd: () => void }) {\n  return (\n    <div className=\"definition\">\n      <div className=\"hwd-row\">\n        <img src={add} onClick={onAdd} />\n        <b>{headword}</b>\n      </div>\n      <p dangerouslySetInnerHTML={{ __html: definition }}></p>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/arrow-up.1ba202ef.svg\";","export default __webpack_public_path__ + \"static/media/arrow-down.200220c5.svg\";","export default __webpack_public_path__ + \"static/media/close.53c9f4b6.svg\";","export default __webpack_public_path__ + \"static/media/loading.2ce5c7c5.gif\";","import { useEffect, useState } from \"react\";\nimport { collins } from \"../../api/collins\";\nimport { DictResultEntry } from \"../../types/types\";\nimport Definition from \"../definition/Definition\";\nimport \"./Dictionary.css\";\nimport arrowUp from \"./arrow-up.svg\";\nimport arrowDown from \"./arrow-down.svg\";\nimport close from \"./close.svg\";\nimport loading from \"./loading.gif\";\nimport { card } from \"../../api/card\";\nimport WordTile from \"../wordtile/WordTile\";\nimport toast from \"react-hot-toast\";\n\ninterface Props {\n  word: string;\n  sentence?: string;\n  articleId: string;\n  wordIndex: number;\n  onClose: () => void;\n}\n\ntype DisplayMode = \"compact\" | \"full\";\n\nexport default function Dictionary({\n  word,\n  sentence = \"\",\n  articleId,\n  wordIndex,\n  onClose,\n}: Props) {\n  console.log(\"rerender\");\n  const [definitionList, setDefinitionList] = useState<DictResultEntry[]>([]);\n  const [displayMode, setDisplayMode] = useState<DisplayMode>(\"compact\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    async function loadDefiniton() {\n      try {\n        setIsLoading(true);\n        setMessage(\"\");\n        const result = await collins.search(word);\n        setDefinitionList(result);\n        if (result.length === 0) {\n          setMessage(\"没查到这个词.\");\n        }\n      } catch {\n        setMessage(\"网络错误.\");\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    loadDefiniton();\n  }, [word]);\n\n  function addDefinition(def: DictResultEntry): void {\n    card.addCard({\n      id: Date.now().toString(),\n      originalWord: word,\n      sentence,\n      articleId,\n      wordTileIndex: wordIndex,\n      dictResult: def,\n      addTime: Date.now(),\n    });\n    toast.success(\"添加成功\");\n  }\n\n  const iconRow = (\n    <div\n      className=\"icon-row\"\n      onClick={() =>\n        setDisplayMode(displayMode === \"full\" ? \"compact\" : \"full\")\n      }\n    >\n      <img\n        src={displayMode === \"full\" ? arrowDown : arrowUp}\n        className=\"expand-icon\"\n      />\n      <img src={close} className=\"close-icon\" onClick={onClose} />\n    </div>\n  );\n  if (isLoading) {\n    return (\n      <div className=\"dictionary\">\n        {iconRow}\n        <div className=\"loading\">\n          <img src={loading} />\n        </div>\n      </div>\n    );\n  }\n  if (displayMode === \"full\") {\n    return (\n      <div className=\"dictionary\">\n        {iconRow}\n        <div className=\"message\">{message}</div>\n        {definitionList.map((d, i) => (\n          <div key={i} className=\"definition-wrapper\">\n            <Definition {...d} onAdd={() => addDefinition(d)}></Definition>\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"dictionary compact\">\n        {iconRow}\n        <div className=\"message\">{message}</div>\n        {definitionList.map((d, i) => (\n          <span key={i} className=\"tag\">\n            {d.shortDefinition}\n          </span>\n        ))}\n      </div>\n    );\n  }\n}\n","import { useState } from \"react\";\nimport { Article, TOKEN_TYPE } from \"../../types/types\";\nimport { splitWords } from \"../../utils\";\nimport WordTile from \"../wordtile/WordTile\";\nimport { Token } from \"../../types/types\";\nimport { collins } from \"../../api/collins\";\nimport Dictionary from \"../dictionary/Dictionary\";\nimport \"./Reader.css\";\n\nexport default function Reader({\n  title = \"\",\n  content = [],\n  articleId,\n}: Partial<Article> & { articleId: string }) {\n  const [selectedWordIndex, setSelectedWordIndex] = useState(-1);\n\n  async function onWordClick(id: number) {\n    console.log(\"word select: \", id);\n    const token = tokens[id];\n    if (token.type === TOKEN_TYPE.WORD) {\n      setSelectedWordIndex(id);\n    }\n  }\n\n  function makeWordTiles(str: string) {\n    return splitWords(str)\n      .concat({ type: TOKEN_TYPE.EOL, word: \"\" })\n      .map((word, i) => {\n        const currentIndex = tokenIndex++;\n        tokens.push(word);\n        return (\n          <WordTile\n            id={currentIndex}\n            text={word.word}\n            selected={selectedWordIndex === currentIndex}\n            onClick={onWordClick}\n            key={currentIndex}\n          ></WordTile>\n        );\n      });\n  }\n\n  function isSentenceEnd(token: Token) {\n    const str = token.word;\n    return (\n      token.type === TOKEN_TYPE.EOL ||\n      str.endsWith(\"?\") ||\n      str.endsWith(\".\") ||\n      str.endsWith(\"!\") ||\n      str.endsWith(\"...\") ||\n      str.endsWith('?\"') ||\n      str.endsWith('!\"') ||\n      str.endsWith('.\"')\n    );\n  }\n\n  function getSentenceFromIndex(index: number) {\n    const thrashhold = 50;\n    let left = index - 1;\n    let right = index;\n    let sentence = `[[${tokens[index].word}]]`;\n    while (left >= 0 && index - left < thrashhold) {\n      if (isSentenceEnd(tokens[left])) {\n        break;\n      }\n      sentence = tokens[left].word + sentence;\n      left--;\n    }\n    while (right < tokens.length && right - index < thrashhold) {\n      if (isSentenceEnd(tokens[right])) {\n        break;\n      }\n      right++;\n      sentence = sentence + tokens[right].word;\n    }\n    return sentence;\n  }\n\n  function onClickReader() {\n    setSelectedWordIndex(-1);\n  }\n\n  let tokenIndex = 0;\n  const tokens = [] as Token[];\n  return (\n    <>\n      <div className=\"reader\" onClick={onClickReader}>\n        <h3>{makeWordTiles(title)}</h3>\n        {content?.map((item, index) => (\n          <p key={index}>{makeWordTiles(item.content)}</p>\n        ))}\n      </div>\n      {selectedWordIndex >= 0 ? (\n        <Dictionary\n          word={tokens[selectedWordIndex].word}\n          sentence={getSentenceFromIndex(selectedWordIndex)}\n          articleId={articleId}\n          wordIndex={selectedWordIndex}\n          onClose={() => setSelectedWordIndex(-1)}\n        ></Dictionary>\n      ) : null}\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { api } from \"../../api/index\";\nimport Reader from \"../../components/reader/Reader\";\nimport { Article } from \"../../types/types\";\n\nexport default function ReaderView() {\n  const params = useParams<{ id: string }>();\n  const id = params.id;\n  const [article, setArticle] = useState<Article>();\n  useEffect(() => {\n    async function getArticle() {\n      setArticle(await api.getArticleDetail(id));\n    }\n    getArticle();\n  }, []);\n  return (\n    <div className=\"App\">{article ? <Reader {...article}></Reader> : \"\"}</div>\n  );\n}\n","import React from \"react\";\nimport { Toaster } from \"react-hot-toast\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport CardListView from \"./views/cardlist/CardListView\";\nimport MainView from \"./views/main/MainView\";\nimport ReaderView from \"./views/reader/ReaderView\";\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <MainView></MainView>\n          </Route>\n          <Route path=\"/article/:id\">\n            <ReaderView></ReaderView>\n          </Route>\n          <Route path=\"/cardlist\">\n            <CardListView></CardListView>\n          </Route>\n        </Switch>\n      </Router>\n      <Toaster />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}